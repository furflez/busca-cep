import { MockTokenRepository } from '@repositories/implementation/MockTokenRepository';
import { GenerateTokenUseCase } from '@usecases/GenerateToken/GenerateTokenUseCase';
import { JsonWebTokenError } from 'jsonwebtoken';
import { TokenValidationUseCase } from './TokenValidationUseCase';

describe('Token Validation', () => {
  const mockTokenRepository = new MockTokenRepository();
  const tokenValidationUseCase = new TokenValidationUseCase(mockTokenRepository);
  const generateTokenUseCase = new GenerateTokenUseCase(mockTokenRepository);

  it('should return true with a valid token when passing a valid token to TokenValidationUseCase.execute()', async () => {
    const token = await generateTokenUseCase.execute({ id: '1111-2222-3333' });
    const decodedToken = await tokenValidationUseCase.execute({ token });
    expect(decodedToken).toBeTruthy();
  });

  it('should throw jwt malformed error if token passed to TokenValidationUseCase.execute() is not a jwt', async () => {
    const expectedError = new JsonWebTokenError('jwt malformed');
    let thrownError;
    try {
      const decodedToken = await tokenValidationUseCase.execute({ token: 'abc' });
    } catch (error) {
      thrownError = error;
    }
    expect(expectedError).toEqual(thrownError);
  });

  it('should return invalid signature if token passed to TokenValidationUseCase.execute() is not generated by this api', async () => {
    const expectedError = new JsonWebTokenError('invalid signature');
    let thrownError;
    try {
      const decodedToken = await tokenValidationUseCase.execute({ token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjIzYTVmYjM1LWMzZmItNDUzYi05Nzk1LWM0MjljNzNjZGVkZCIsImlhdCI6MTYzOTM0NjcxMCwiZXhwIjoxNjM5MzUwMzEwfQ.ToNwYToW_Nte98H7tBQPiTG_ggB8k023e9HUQXKl3KE' });
    } catch (error) {
      thrownError = error;
    }
    expect(expectedError).toEqual(thrownError);
  });

  it('should return expiration error when token passed to TokenValidationUseCase.execute() is expired', async () => {
    const expectedError = new JsonWebTokenError('jwt expired');
    let thrownError;
    try {
      const decodedToken = await tokenValidationUseCase.execute({ token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjExMTEtMjIyMi0zMzMzIiwiaWF0IjoxNjM5MzU3Njg4LCJleHAiOjE2MzkzNTc2ODl9.0ZsRmeN0uM3HGcrueZeesN9GcQPng6LvL8NwUY7G4Do' });
    } catch (error) {
      thrownError = error;
    }
    expect(expectedError).toEqual(thrownError);
  });
});
